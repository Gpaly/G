package saurabhc3;

import java.util.*;

class Edge implements Comparable<Edge> {
    int src, dest, weight;

    public int compareTo(Edge compareEdge) {
        return this.weight - compareEdge.weight;
    }
}

public class KruskalsAlgorithm {
    int V, E;
    Edge[] edges;

    KruskalsAlgorithm(int V, int E) {
        this.V = V;
        this.E = E;
        edges = new Edge[E];
        for (int i = 0; i < E; i++) edges[i] = new Edge();
    }

    int find(int[] parent, int i) {
        if (parent[i] == -1) return i;
        return find(parent, parent[i]);
    }

    void union(int[] parent, int x, int y) {
        parent[x] = y;
    }

    void kruskalMST() {
        Arrays.sort(edges);
        Edge[] result = new Edge[V];
        for (int i = 0; i < V; i++) result[i] = new Edge();

        int[] parent = new int[V];
        Arrays.fill(parent, -1);

        int e = 0, i = 0;
        while (e < V - 1) {
            Edge nextEdge = edges[i++];
            int x = find(parent, nextEdge.src);
            int y = find(parent, nextEdge.dest);

            if (x != y) {
                result[e++] = nextEdge;
                union(parent, x, y);
            }
        }

        System.out.println("Edge \tWeight");
        for (i = 0; i < e; i++)
            System.out.println(result[i].src + " - " + result[i].dest + "\t" + result[i].weight);
    }

    public static void main(String[] args) {
        int V = 4, E = 5;
        KruskalsAlgorithm graph = new KruskalsAlgorithm(V, E);

        graph.edges[0] = new Edge(); graph.edges[0].src = 0; graph.edges[0].dest = 1; graph.edges[0].weight = 10;
        graph.edges[1] = new Edge(); graph.edges[1].src = 0; graph.edges[1].dest = 2; graph.edges[1].weight = 6;
        graph.edges[2] = new Edge(); graph.edges[2].src = 0; graph.edges[2].dest = 3; graph.edges[2].weight = 5;
        graph.edges[3] = new Edge(); graph.edges[3].src = 1; graph.edges[3].dest = 3; graph.edges[3].weight = 15;
        graph.edges[4] = new Edge(); graph.edges[4].src = 2; graph.edges[4].dest = 3; graph.edges[4].weight = 4;

        graph.kruskalMST();
    }
}
